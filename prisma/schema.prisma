generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EMPLOYER
  EMPLOYEE
}

enum InterviewStatus {
  SCHEDULED
  CANCELLED
  RESCHEDULE_REQUESTED
  COMPLETED
}

model User {
  id                    String         @id @default(uuid())
  email                 String         @unique
  phone                 String?        @unique
  password              String
  role                  Role           @default(EMPLOYEE)
  isVerified            Boolean        @default(false)
  profile               Profile?
  orgs                  OrgMember[]
  organizationsOwned    Organization[] @relation("UserOrganizationsOwned")
  applications          Application[]
  refreshTokens         RefreshToken[]
  otpCodes              OtpCode[]
  interviewsAsEmployer  Interview[]    @relation("EmployerInterview")
  interviewsAsApplicant Interview[]    @relation("ApplicantInterview")
  sentMessages          Message[]      @relation("SentMessages")
  receivedMessages      Message[]      @relation("ReceivedMessages")
  createdAt             DateTime       @default(now())
}

model Profile {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @unique
  name       String
  headline   String?
  skills     String[] @default([])
  resumeJson Json?
}

model Organization {
  id        String      @id @default(uuid())
  name      String
  owner     User        @relation("UserOrganizationsOwned", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String
  members   OrgMember[]
  jobs      Job[]
  payments  Payment[]
  createdAt DateTime    @default(now())
}

model OrgMember {
  id     String       @id @default(uuid())
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  org    Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId  String
  role   String       @default("member")
}

model Job {
  id           String        @id @default(uuid())
  title        String
  description  String
  location     String?
  type         String?
  org          Organization  @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId        String
  applications Application[]
  interviews   Interview[]
  messages     Message[]     @relation("JobMessages")
  createdAt    DateTime      @default(now())
}

model Application {
  id          String   @id @default(uuid())
  applicant   User     @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId String
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId       String
  status      String   @default("PENDING")
  coverLetter String?
  createdAt   DateTime @default(now())
}

model RefreshToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  rid       String   @unique
  expiresAt DateTime
}

model OtpCode {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  code      String
  purpose   String
  expiresAt DateTime
  consumed  Boolean  @default(false)
}

model Payment {
  id              String       @id @default(uuid())
  org             Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId           String
  jobId           String?
  amount          Float
  stripeSessionId String?      @unique
  status          String       @default("PENDING")
  metadata        String?
  createdAt       DateTime     @default(now())
}

model Interview {
  id            String          @id @default(uuid())
  job           Job             @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId         String
  employer      User            @relation("EmployerInterview", fields: [employerId], references: [id], onDelete: Cascade)
  employerId    String
  applicant     User            @relation("ApplicantInterview", fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId   String
  scheduledTime DateTime
  status        InterviewStatus @default(SCHEDULED)
  notes         String?
  createdAt     DateTime        @default(now())
}

model Message {
  id         String   @id @default(uuid())
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String
  content    String
  sentAt     DateTime @default(now())
  job        Job?     @relation("JobMessages", fields: [jobId], references: [id], onDelete: Cascade)
  jobId      String?
  delivered  Boolean  @default(false)
}
